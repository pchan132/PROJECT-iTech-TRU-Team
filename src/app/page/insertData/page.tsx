"use client";

import { useRef, useState } from "react";
import { Input } from "@/components/ui/input"; // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ UI ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { UploadIcon } from "lucide-react";

import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const formSchema = z.object({
  ArtifactName: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢"),
  Description: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠"),
  ExternalLink: z
    .string()
    .optional()
    .refine(
      (val) =>
        !val || /^((https?:\/\/)?([\w.-]+\.[a-z]{2,})(\/\S*)?)$/i.test(val),
      {
        message:
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô example.com ‡∏´‡∏£‡∏∑‡∏≠ https://example.com",
      }
    ),
  ImageFile: z.instanceof(File).optional(),
  AttachedPDF: z.instanceof(File).optional(),
  FirstName: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥"),
  LastName: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥"),
  Title: z.string().min(1, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠"),
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (TypeScript type) ‡∏ä‡∏∑‡πà‡∏≠ FormData ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
type FormData = z.infer<typeof formSchema>;

export default function AddResearchPage() {
  const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null);
  const imageInputRef = useRef<HTMLInputElement>(null);

  // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ React Hook Form ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Zod ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏î‡∏≤‡∏¢
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    reset,
  } = useForm<FormData>({
    resolver: zodResolver(formSchema) as any,
  });

  //‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Submit
  const onSubmitForm = async (data: FormData) => {
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const formData = new FormData();
    formData.append("ArtifactName", data.ArtifactName);
    formData.append("Description", data.Description);
    if (data.ExternalLink) formData.append("ExternalLink", data.ExternalLink);
    if (data.ImageFile) formData.append("ImageFile", data.ImageFile);
    if (data.AttachedPDF) formData.append("AttachedPDF", data.AttachedPDF);
    formData.append("FirstName", data.FirstName);
    formData.append("LastName", data.LastName);
    formData.append("Title", data.Title);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API POST
    try {
      const response = await fetch("/api/research", {
        method: "POST",
        body: formData,
      });
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      if (!response.ok) {
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }

      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const result = await response.json();
      alert("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      reset();
      setImagePreviewUrl(null);
    } catch (error) {
      console.error("Error submitting form:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  };

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏£‡∏≤ className ‡πÄ‡∏õ‡πá‡∏ô hidden ‡∏≠‡∏¢‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  const handleImageClick = () => {
    imageInputRef.current?.click();
  };

  ////////////// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á preview /////////////
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô ‡πÑ‡∏ü‡∏•‡πå
      setValue("ImageFile", file); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ react-hook-form ‡∏î‡πâ‡∏ß‡∏¢
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview URL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreviewUrl(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PDF
  const handlePDFChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setValue("AttachedPDF", file);
    }
  };

  /////////////// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° /////////////////////
  const handleReset = () => {
    reset();
    setImagePreviewUrl(null);
  };

  return (
    <div className="flex  items-center justify-center px-4 py-8">
      <div className="bg-white rounded-xl w-full max-w-2xl shadow-lg">
        {/* Header */}
        <div className="bg-red-500 text-white text-center py-4 rounded-t-xl text-xl font-bold">
          ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢
        </div>

        {/* Form content */}
        <form className="p-6 space-y-5" onSubmit={handleSubmit(onSubmitForm)}>
          <div>
            <label className="font-bold flex items-center gap-2 mb-1">
              üìò ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢
            </label>
            <input
              type="text"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≤‡∏ô‡πÑ‡∏´‡∏°‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
              className="w-full p-2 rounded bg-yellow-200 border border-yellow-300"
              {...register("ArtifactName")}
            />
          </div>
          {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà ‡∏´‡∏£‡∏∑‡∏≠ errors ArtifactName*/}
          {errors.ArtifactName && (
            <p className="text-red-500 text-sm">
              {errors.ArtifactName.message}
            </p>
          )}

          {/* ========== ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ================*/}
          <div>
            <label className="font-bold mb-1 block">üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</label>
            <div
              onClick={handleImageClick}
              className="w-full border-2 border-dashed border-gray-300 rounded-md bg-gray-50 py-8 text-center cursor-pointer"
            >
              {imagePreviewUrl ? (
                <img
                  src={imagePreviewUrl}
                  alt="Preview"
                  className="mx-auto max-h-48 object-contain"
                />
              ) : (
                <>
                  <UploadIcon className="mx-auto text-gray-400 mb-2" />
                  <span className="text-gray-600">
                    ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á
                  </span>
                </>
              )}
            </div>
            <Input
              type="file"
              accept="image/*"
              ref={imageInputRef}
              className="hidden"
              onChange={handleImageChange}
            />
          </div>

          {/*========== ‡πÉ‡∏™‡πà‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠ ===================*/}
          <div>
            <label className="font-bold mb-1 block">‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠</label>
            <Textarea
              rows={5}
              placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏±‡∏î‡∏¢‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç..."
              className="bg-yellow-200"
              {...register("Description")}
            />
          </div>
          {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà Description ‡∏´‡∏£‡∏∑‡∏≠ errors Description*/}
          {errors.Description && (
            <p className="text-red-500 text-sm">{errors.Description.message}</p>
          )}

          {/*========== ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ß‡∏¥‡∏à‡∏±‡∏¢/‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥ ================*/}
          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥ */}
          <div>
            <label className="font-bold mb-1 block">üë§ ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</label>
            <Input
              type="text"
              className="bg-yellow-200"
              {...register("Title")}
            />
            {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà Title ‡∏´‡∏£‡∏∑‡∏≠ errors Title*/}
            {errors.Title && (
              <p className="text-red-500 text-sm">{errors.Title.message}</p>
            )}

            <label className="font-bold mt-3 block">‡∏ä‡∏∑‡πà‡∏≠</label>
            <Input
              type="text"
              className="bg-yellow-200"
              {...register("FirstName")}
            />
            {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà FirstName ‡∏´‡∏£‡∏∑‡∏≠ errors FirstName*/}
            {errors.FirstName && (
              <p className="text-red-500 text-sm">{errors.FirstName.message}</p>
            )}

            <label className="font-bold mt-3 block">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
            <Input
              type="text"
              className="bg-yellow-200"
              {...register("LastName")}
            />
            {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà LastName ‡∏´‡∏£‡∏∑‡∏≠ errors LastName*/}
            {errors.LastName && (
              <p className="text-red-500 text-sm">{errors.LastName.message}</p>
            )}
          </div>

          {/*=============== üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (PDF) ==============*/}
          <div>
            <label className="font-bold mb-1 block ">
              üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢ (PDF)
            </label>
            <Input
              type="file"
              accept=".pdf,.doc,.docx"
              className="bg-white"
              onChange={handlePDFChange}
            />
          </div>

          {/* Buttons */}
          <div className="flex justify-between pt-4">
            <Button
              type="submit"
              className="bg-blue-500 hover:bg-blue-600 text-white"
              disabled={isSubmitting}
            >
              {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </Button>
            <Button
              onClick={handleReset}
              type="reset"
              className="bg-yellow-300 hover:bg-yellow-400 text-black"
            >
              ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
